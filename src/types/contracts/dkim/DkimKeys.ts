/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface DkimKeysInterface extends utils.Interface {
  functions: {
    "getKey(string,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeKey(string,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateKey(string,string,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getKey"
      | "owner"
      | "removeKey"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateKey"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getKey",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeKey",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKey",
    values: [string, string, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateKey", data: BytesLike): Result;

  events: {
    "DeleteDKIMKey(string,string,bytes,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateDKIMKey(string,string,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeleteDKIMKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDKIMKey"): EventFragment;
}

export interface DeleteDKIMKeyEventObject {
  domain: string;
  selector: string;
  exponent: string;
  modulus: string;
}
export type DeleteDKIMKeyEvent = TypedEvent<
  [string, string, string, string],
  DeleteDKIMKeyEventObject
>;

export type DeleteDKIMKeyEventFilter = TypedEventFilter<DeleteDKIMKeyEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpdateDKIMKeyEventObject {
  domain: string;
  selector: string;
  exponent: string;
  modulus: string;
}
export type UpdateDKIMKeyEvent = TypedEvent<
  [string, string, string, string],
  UpdateDKIMKeyEventObject
>;

export type UpdateDKIMKeyEventFilter = TypedEventFilter<UpdateDKIMKeyEvent>;

export interface DkimKeys extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DkimKeysInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getKey(
      domain: string,
      selector: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeKey(
      domain: string,
      selector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateKey(
      domain: string,
      selector: string,
      exponent: BytesLike,
      modulus: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getKey(
    domain: string,
    selector: string,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeKey(
    domain: string,
    selector: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateKey(
    domain: string,
    selector: string,
    exponent: BytesLike,
    modulus: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getKey(
      domain: string,
      selector: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeKey(
      domain: string,
      selector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateKey(
      domain: string,
      selector: string,
      exponent: BytesLike,
      modulus: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DeleteDKIMKey(string,string,bytes,bytes)"(
      domain?: null,
      selector?: null,
      exponent?: null,
      modulus?: null
    ): DeleteDKIMKeyEventFilter;
    DeleteDKIMKey(
      domain?: null,
      selector?: null,
      exponent?: null,
      modulus?: null
    ): DeleteDKIMKeyEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "UpdateDKIMKey(string,string,bytes,bytes)"(
      domain?: null,
      selector?: null,
      exponent?: null,
      modulus?: null
    ): UpdateDKIMKeyEventFilter;
    UpdateDKIMKey(
      domain?: null,
      selector?: null,
      exponent?: null,
      modulus?: null
    ): UpdateDKIMKeyEventFilter;
  };

  estimateGas: {
    getKey(
      domain: string,
      selector: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeKey(
      domain: string,
      selector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateKey(
      domain: string,
      selector: string,
      exponent: BytesLike,
      modulus: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getKey(
      domain: string,
      selector: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeKey(
      domain: string,
      selector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateKey(
      domain: string,
      selector: string,
      exponent: BytesLike,
      modulus: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
