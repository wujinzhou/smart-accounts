/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace DkimDecoder {
  export type HeadersStruct = {
    len: BigNumberish;
    name: string[];
    value: string[];
    signature: string;
  };

  export type HeadersStructOutput = [BigNumber, string[], string[], string] & {
    len: BigNumber;
    name: string[];
    value: string[];
    signature: string;
  };

  export type SigTagsStruct = {
    d: string;
    i: string;
    s: string;
    b: string;
    bh: string;
    cHeader: string;
    cBody: string;
    aHash: string;
    aKey: string;
    h: string;
    l: BigNumberish;
  };

  export type SigTagsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber
  ] & {
    d: string;
    i: string;
    s: string;
    b: string;
    bh: string;
    cHeader: string;
    cBody: string;
    aHash: string;
    aKey: string;
    h: string;
    l: BigNumber;
  };
}

export interface DkimDecoderInterface extends utils.Interface {
  functions: {
    "getFromHeader((uint256,string[],string[],string))": FunctionFragment;
    "getHeader((uint256,string[],string[],string),string)": FunctionFragment;
    "parse(string)": FunctionFragment;
    "parseSigTags(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getFromHeader"
      | "getHeader"
      | "parse"
      | "parseSigTags"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFromHeader",
    values: [DkimDecoder.HeadersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getHeader",
    values: [DkimDecoder.HeadersStruct, string]
  ): string;
  encodeFunctionData(functionFragment: "parse", values: [string]): string;
  encodeFunctionData(
    functionFragment: "parseSigTags",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFromHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHeader", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseSigTags",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DkimDecoder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DkimDecoderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFromHeader(
      headers: DkimDecoder.HeadersStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHeader(
      headers: DkimDecoder.HeadersStruct,
      headerName: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    parse(
      all: string,
      overrides?: CallOverrides
    ): Promise<[DkimDecoder.HeadersStructOutput]>;

    parseSigTags(
      signature: string,
      overrides?: CallOverrides
    ): Promise<
      [DkimDecoder.SigTagsStructOutput, boolean] & {
        sigTags: DkimDecoder.SigTagsStructOutput;
        success: boolean;
      }
    >;
  };

  getFromHeader(
    headers: DkimDecoder.HeadersStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getHeader(
    headers: DkimDecoder.HeadersStruct,
    headerName: string,
    overrides?: CallOverrides
  ): Promise<string>;

  parse(
    all: string,
    overrides?: CallOverrides
  ): Promise<DkimDecoder.HeadersStructOutput>;

  parseSigTags(
    signature: string,
    overrides?: CallOverrides
  ): Promise<
    [DkimDecoder.SigTagsStructOutput, boolean] & {
      sigTags: DkimDecoder.SigTagsStructOutput;
      success: boolean;
    }
  >;

  callStatic: {
    getFromHeader(
      headers: DkimDecoder.HeadersStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getHeader(
      headers: DkimDecoder.HeadersStruct,
      headerName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    parse(
      all: string,
      overrides?: CallOverrides
    ): Promise<DkimDecoder.HeadersStructOutput>;

    parseSigTags(
      signature: string,
      overrides?: CallOverrides
    ): Promise<
      [DkimDecoder.SigTagsStructOutput, boolean] & {
        sigTags: DkimDecoder.SigTagsStructOutput;
        success: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getFromHeader(
      headers: DkimDecoder.HeadersStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHeader(
      headers: DkimDecoder.HeadersStruct,
      headerName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parse(all: string, overrides?: CallOverrides): Promise<BigNumber>;

    parseSigTags(
      signature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFromHeader(
      headers: DkimDecoder.HeadersStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHeader(
      headers: DkimDecoder.HeadersStruct,
      headerName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parse(
      all: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseSigTags(
      signature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
