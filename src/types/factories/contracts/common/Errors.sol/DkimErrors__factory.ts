/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DkimErrors,
  DkimErrorsInterface,
} from "../../../../contracts/common/Errors.sol/DkimErrors";

const _abi = [
  {
    inputs: [],
    name: "DomainMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "MalformedAlgorithm",
    type: "error",
  },
  {
    inputs: [],
    name: "NoDNSRecord",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsupportedHash",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsupportedKey",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongDkimVersion",
    type: "error",
  },
] as const;

const _bytecode =
  "0x608080604052346013576011908160198239f35b600080fdfe600080fdfea164736f6c6343000813000a";

type DkimErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DkimErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DkimErrors__factory extends ContractFactory {
  constructor(...args: DkimErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<DkimErrors> {
    return super.deploy(overrides || {}) as Promise<DkimErrors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DkimErrors {
    return super.attach(address) as DkimErrors;
  }
  override connect(signer: Signer): DkimErrors__factory {
    return super.connect(signer) as DkimErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DkimErrorsInterface {
    return new utils.Interface(_abi) as DkimErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DkimErrors {
    return new Contract(address, _abi, signerOrProvider) as DkimErrors;
  }
}
