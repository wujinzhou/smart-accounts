/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DkimVerifier,
  DkimVerifierInterface,
} from "../../../contracts/dkim/DkimVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract DkimKeys",
        name: "_keys",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DomainMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "MalformedAlgorithm",
    type: "error",
  },
  {
    inputs: [],
    name: "NoDNSRecord",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsupportedHash",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsupportedKey",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongDkimVersion",
    type: "error",
  },
  {
    inputs: [],
    name: "keys",
    outputs: [
      {
        internalType: "contract DkimKeys",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        internalType: "string",
        name: "selector",
        type: "string",
      },
      {
        internalType: "string",
        name: "hashAlgo",
        type: "string",
      },
    ],
    name: "verifySignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a03461007157601f610c2d38819003918201601f19168301916001600160401b038311848410176100765780849260209460405283398101031261007157516001600160a01b038116810361007157608052604051610ba0908161008d823960805181818161012401526103880152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060405260048036101561001357600080fd5b6000803560e01c8063307540f6146100fc5763e5a3c0421461003457600080fd5b346100e95760a03660031901126100e95767ffffffffffffffff82358181116100f85761006490369085016101c2565b926024358281116100f45761007c90369083016101c2565b906044358381116100f05761009490369083016101c2565b926064358181116100ec576100ac90369084016101c2565b946084359182116100e9576100e56100d3888888886100cd36898b016101c2565b93610349565b60405190151581529081906020820190565b0390f35b80fd5b8580fd5b8480fd5b8380fd5b8280fd5b50346100e957806003193601126100e95773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660805260206080f35b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761017f57604052565b61014d565b90601f8019910116810190811067ffffffffffffffff82111761017f57604052565b67ffffffffffffffff811161017f57601f01601f191660200190565b81601f82011215610209578035906101d9826101a6565b926101e76040519485610184565b8284526020838301011161020957816000926020809301838601378301015290565b600080fd5b60005b8381106102215750506000910152565b8181015183820152602001610211565b81601f82011215610209578051610247816101a6565b926102556040519485610184565b8184526020828401011161020957610273916020808501910161020e565b90565b9190916040818403126102095780519267ffffffffffffffff9384811161020957816102a3918401610231565b936020830151908111610209576102739201610231565b906020916102d38151809281855285808601910161020e565b601f01601f1916010190565b90916102f6610273936040845260408401906102ba565b9160208184039101526102ba565b6040513d6000823e3d90fd5b6040519061031d82610163565b600682527f73686132353600000000000000000000000000000000000000000000000000006020830152565b604051630f8a453760e31b815294919390926000918691829161036f91600484016102df565b038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561044557600094859261041f575b508451158015610416575b610404576103ed906103e76103e16103dc610310565b610a35565b91610a35565b90610a67565b156103fb5761027393610491565b610273936104f3565b604051634fbccbf960e11b8152600490fd5b508151156103c6565b909461043d92503d8091833e6104358183610184565b810190610276565b9093386103bb565b610304565b634e487b7160e01b600052601160045260246000fd5b60131981019190821161046f57565b61044a565b602003906020821161046f57565b60001981019190821161046f57565b9061049c9293610941565b9091826104a857505090565b60209192506104c6600091836040519282848094519384920161020e565b8101039060025afa15610445576000519080519081601f1981011161046f57805182116102095701511490565b906104fe9293610941565b8192919261050b57505090565b9091506040918251906020815191019360019267ffffffffffffffc0848401168281019060098486830301108614610900575b50776745230100efcdab890098badcfe001032547600c3d2e1f0966000946020840194905b8387106106115750505050505050506105898161058361059b9351610460565b90610a0b565b6bffffffffffffffffffffffff191690565b906bffffffffffffffffffffffff199063ffffffff81169067ffffffff000000008160081c16906bffffffff00000000000000008160101c169073ffffffff000000000000000000000000000000006fffffffff0000000000000000000000008260181c169160201c161717171760601b161490565b91939598979092949699610626838b8761090b565b87526106368360208c018761090b565b88528983038481108c146108f4575b50603f198681018b148c146108e6575b845b60808110610874575060805b61014081106108035750508891600095869787945b605090818710156107cc578f91906014880480156107915780600114610773578060021461073457600314610717575b808d8d8d601f77ffffffff00ffffffff000000000000ffffffff00ffffffff9560bb1c1663ffffffe085609b1c16170163ffffffff84160101908a60021b015160e01c0160a01b9060281c1791633fffffff8360521c1663c00000008460321c1617901b911617950194610678565b63ca62c1d69b50602881901c607882901c82841c18189a506106a8565b509a50985089891c8a60781c908082178c60281c169116179877ffffffff00ffffffff000000000000ffffffff00ffffffff638f1bbcdc9b90506106a8565b50636ed9eba19b50602881901c607882901c82841c18189a506106a8565b509a5098508960281c808b8b1c188b60781c16189877ffffffff00ffffffff000000000000ffffffff00ffffffff635a8279999b90506106a8565b929a98505095975087929c9994935077ffffffff00ffffffff00ffffffff00ffffffff00ffffffff919a0116990195919490610563565b806018918a01607f19810151606f19820151188482015160171983015118187ffffffffcfffffffcfffffffcfffffffcfffffffcfffffffcfffffffcfffffffc7c030000000300000003000000030000000300000003000000030000000382601e1c169160021b1617905201610663565b88810182810151603719820151601f19830151600b1984015118911818808f1b7ffffffffefffffffefffffffefffffffefffffffefffffffefffffffefffffffe16601f9190911c7c010000000100000001000000010000000100000001000000010000000116179052600c01610657565b8360031b8951178952610655565b60809088015338610645565b60809150013861053e565b92919060009382821061091d57505050565b810151929350900360208110610931575090565b6020036101000a60001901191690565b906109b26080835192805190865195604051968793602085019788526040850152606084015261097a815180926020878701910161020e565b820161098f825180936020878501910161020e565b018651906109a38285830160208b0161020e565b01036060810185520183610184565b8251906109d76109c1836101a6565b926109cf6040519485610184565b8084526101a6565b602083019290601f1901368437935192519060055afa91565b906020820180921161046f57565b9190820180921161046f57565b906014810180821161046f578251106102095701602001516bffffffffffffffffffffffff191690565b60006020604051610a4581610163565b8281520152602081519160405192610a5c84610163565b835201602082015290565b90610a7191610acd565b1590565b908160031b917f1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81160361046f57565b60ff811161046f576001901b90565b8181039291600013801582851316918412161761046f57565b91908251928151848110610b8b575b506020808201519481840151906000965b818810610b07575050505061027392935051905190610ab4565b8051835190818103610b38575b5050610b2b610b25610b31926109f0565b936109f0565b976109f0565b9691610aed565b600019868510610b5a575b9182169116818114610b1457039750505050505050565b50610b85610b80610b7b610b768d610b7189610474565b6109fe565b610a75565b610aa5565b610482565b19610b43565b935038610adc56fea164736f6c6343000813000a";

type DkimVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DkimVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DkimVerifier__factory extends ContractFactory {
  constructor(...args: DkimVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _keys: string,
    overrides?: Overrides & { from?: string }
  ): Promise<DkimVerifier> {
    return super.deploy(_keys, overrides || {}) as Promise<DkimVerifier>;
  }
  override getDeployTransaction(
    _keys: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_keys, overrides || {});
  }
  override attach(address: string): DkimVerifier {
    return super.attach(address) as DkimVerifier;
  }
  override connect(signer: Signer): DkimVerifier__factory {
    return super.connect(signer) as DkimVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DkimVerifierInterface {
    return new utils.Interface(_abi) as DkimVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DkimVerifier {
    return new Contract(address, _abi, signerOrProvider) as DkimVerifier;
  }
}
